from dataclasses import dataclass, field\nimport datetime\nfrom typing import List, Optional\nfrom enum import Enum\n\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\nfrom beaverhabits.utils import generate_short_hash\n\nDAY_MASK = "%Y-%m-%d"\nMONTH_MASK = "%Y/%m"\n\nclass HabitStatus(Enum):\n    ACTIVE = "normal"\n    ARCHIVED = "archive"\n    SOFT_DELETED = "soft_delete"\n\n@dataclass\nclass DictStorage:\n    data: dict = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    day: datetime.date\n    done: bool\n\n    @property\n    def day(self) -> datetime.date:\n        return self._day\n\n    @property\n    def done(self) -> bool:\n        return self._done\n\n    @day.setter\n    def day(self, value: datetime.date) -> None:\n        self._day = value\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        self._done = value\n\n@dataclass\nclass DictHabit(Habit[DictRecord], DictStorage):\n    id: str\n    name: str\n    star: bool\n    records: List[DictRecord]\n    status: HabitStatus\n\n    def __init__(self, id: str, name: str, star: bool = False, records: List[DictRecord] = [], status: HabitStatus = HabitStatus.ACTIVE):\n        self.id = id\n        self.name = name\n        self.star = star\n        self.records = records\n        self.status = status\n\n    @property\n    def ticked_days(self) -> List[datetime.date]:\n        return [r.day for r in self.records if r.done]\n\n    async def tick(self, day: datetime.date, done: bool) -> None:\n        for record in self.records:\n            if record.day == day:\n                record.done = done\n                return\n        self.records.append(DictRecord(day, done))\n\n    async def merge(self, other: "DictHabit") -> "DictHabit":\n        merged_records = self.records + other.records\n        merged_records = [record for record in merged_records if any(mr.day == record.day and mr.done == record.done for mr in merged_records)]\n        return DictHabit(self.id, self.name, self.star, merged_records, self.status)\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, DictHabit) and self.id == other.id\n\n    def __hash__(self) -> int:\n        return hash(self.id)\n\n    def __str__(self) -> str:\n        return self.name\n    __repr__ = __str__\n