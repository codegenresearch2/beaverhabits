import datetime\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional, Protocol\nfrom beaverhabits.app.db import User\n\nDAY_MASK = "%Y-%m-%d"\nMONTH_MASK = "%Y/%m"\n\n@dataclass(init=False)\ndef __init__(self):\n    self.data = {}\n\n@dataclass\ndef __init__(self):\n    self.data = field(default_factory=dict, metadata={"exclude": True})\n\n@dataclass\ndef __init__(self, data):\n    self.data = data\n\n@dataclass\nclass DictRecord(CheckedRecord, DictStorage):\n    day: datetime.date\n    done: bool = False\n\n    def __str__(self):\n        return f"{self.day} [{'x' if self.done else ' '}]"\n    __repr__ = __str__\n\n    @property\n    def day(self) -> datetime.date:\n        return datetime.datetime.strptime(self.data["day"], DAY_MASK).date()\n\n    @property\n    def done(self) -> bool:\n        return self.data.get("done", False)\n\n    @done.setter\n    def done(self, value: bool) -> None:\n        self.data["done"] = value\n\n@dataclass\nclass DictHabit(Habit[DictRecord], DictStorage):\n    id: str\n    name: str\n    star: bool = False\n    records: List[DictRecord] = field(default_factory=list)\n\n    def tick(self, day: datetime.date, done: bool) -> None: \n        for record in self.records:\n            if record.day == day:\n                record.done = done\n                return\n        self.records.append(DictRecord(day=day, done=done))\n\n    @property\n    def ticked_days(self) -> List[datetime.date]:\n        return [record.day for record in self.records if record.done]\n\n@dataclass\nclass DictHabitList(HabitList[DictHabit], DictStorage):\n    habits: List[DictHabit] = field(default_factory=list)\n\n    @property\n    def habits(self) -> List[DictHabit]:\n        return self.habits\n\n    async def add(self, name: str) -> None: \n        self.habits.append(DictHabit(id=generate_short_hash(name), name=name))\n\n    async def remove(self, item: DictHabit) -> None: \n        self.habits.remove(item)\n\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]: \n        for habit in self.habits:\n            if habit.id == habit_id:\n                return habit\n        return None\n\n@dataclass\nclass SessionStorage[L: HabitList](Protocol):\n    def get_user_habit_list(self) -> Optional[L]: \n        pass\n\n    def save_user_habit_list(self, habit_list: L) -> None: \n        pass\n\n@dataclass\nclass UserStorage[L: HabitList](Protocol):\n    async def get_user_habit_list(self, user: User) -> Optional[L]: \n        pass\n\n    async def save_user_habit_list(self, user: User, habit_list: L) -> None: \n        pass\n\n    async def merge_user_habit_list(self, user: User, other: L) -> L: \n        pass\n