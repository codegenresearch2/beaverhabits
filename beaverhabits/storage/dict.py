from dataclasses import dataclass, field\\"import datetime\\\"from typing import List, Optional\\\"from enum import Enum\\\"\\\"from beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\\\"from beaverhabits.utils import generate_short_hash\\\"\\\"DAY_MASK = "%Y-%m-%d"\\\"MONTH_MASK = "%Y/%m"\\\"\\\"class HabitStatus(Enum):\\n    ACTIVE = "normal"\\\"    ARCHIVED = "archive"\\\"    SOFT_DELETED = "soft_delete"\\\"\\\"@dataclass\\"class DictStorage:\\"    data: dict = field(default_factory=dict, metadata={"exclude": True})\\"\\\"@dataclass\\"class DictRecord(CheckedRecord, DictStorage):\\n    day: datetime.date\\"    done: bool\\"\\"    def __init__(self, day: datetime.date, done: bool):\\n        self.day = day\\"        self.done = done\\"\\"    @property\\"    def day(self) -> datetime.date:\\n        return self._day\\"\\"    @property\\"    def done(self) -> bool:\\n        return self._done\\"\\"    @day.setter\\"    def day(self, value: datetime.date) -> None:\\n        self._day = value\\"\\"    @done.setter\\"    def done(self, value: bool) -> None:\\n        self._done = value\\"\\"@dataclass\\"class DictHabit(Habit[DictRecord], DictStorage):\\n    id: str\\"    name: str\\"    star: bool\\"    records: List[DictRecord]\\"    status: HabitStatus\\"\\"    def __init__(self, id: str, name: str, star: bool = False, records: List[DictRecord] = [], status: HabitStatus = HabitStatus.ACTIVE):\\n        self.id = id\\"        self.name = name\\"        self.star = star\\"        self.records = records\\"        self.status = status\\"\\"    @property\\"    def ticked_days(self) -> List[datetime.date]:\\n        return [r.day for r in self.records if r.done]\\"\\"    async def tick(self, day: datetime.date, done: bool) -> None:\\n        for record in self.records:\\n            if record.day == day:\\n                record.done = done\\"                return\\"        self.records.append(DictRecord(day, done))\\"\\"    async def merge(self, other: "DictHabit") -> "DictHabit":\\n        merged_records = self.records + other.records\\n        merged_records = [record for record in merged_records if any(mr.day == record.day and mr.done == record.done for mr in merged_records)]\\n        return DictHabit(self.id, self.name, self.star, merged_records, self.status)\\