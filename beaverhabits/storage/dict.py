import datetime\\\nfrom dataclasses import dataclass, field\\\\\nfrom typing import List, Optional, Protocol\\\\\nfrom beaverhabits.app.db import User\\\\\n\\\\nDAY_MASK = "%Y-%m-%d"\\\\nMONTH_MASK = "%Y/%m"\\\\n\\\\n@dataclass\\\\\ndef __init__(self):\\n    self.data = {}\\\\\n@dataclass\\\\\ndef __init__(self):\\n    self.data = field(default_factory=dict, metadata={"exclude": True})\\\\\\\n@dataclass\\\\\ndef __init__(self, data):\\n    self.data = data\\\\\\\n@dataclass\\\\\nclass DictRecord(CheckedRecord, DictStorage):\\n    day: datetime.date\\\\\n    done: bool\\\\\n    def __str__(self):\\n        return f"{self.day} {'[x]' if self.done else '[ ]'}"\\\\\\\n    __repr__ = __str__\\\\\\\n@dataclass\\\\\nclass DictHabit(Habit[DictRecord], DictStorage):\\n    id: str | int\\\\\n    name: str\\\\\n    star: bool\\\\\n    records: List[DictRecord]\\\\\n    def tick(self, day: datetime.date, done: bool) -> None: \\\n        pass\\\\\\\n@dataclass\\\\\nclass DictHabitList(HabitList[DictHabit], DictStorage):\\n    habits: List[DictHabit]\\\\\n    async def add(self, name: str) -> None: \\\n        pass\\\\\\\n    async def remove(self, item: DictHabit) -> None: \\\n        pass\\\\\\\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]: \\\n        pass\\\\\\\n@dataclass\\\\\nclass SessionStorage[L: HabitList](Protocol):\\n    def get_user_habit_list(self) -> Optional[L]: \\\n        pass\\\\\\\n    def save_user_habit_list(self, habit_list: L) -> None: \\\n        pass\\\\\\\n@dataclass\\\\\nclass UserStorage[L: HabitList](Protocol):\\n    async def get_user_habit_list(self, user: User) -> Optional[L]: \\\n        pass\\\\\\\n    async def save_user_habit_list(self, user: User, habit_list: L) -> None: \\\n        pass\\\\\\\n    async def merge_user_habit_list(self, user: User, other: L) -> L: \\\n        pass\\\\\\\n