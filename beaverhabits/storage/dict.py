import datetime\\\nfrom dataclasses import dataclass, field\\\\\nfrom typing import Optional\\\\nfrom beaverhabits.storage.storage import CheckedRecord, Habit, HabitList\\\\nfrom beaverhabits.utils import generate_short_hash\\\\nDAY_MASK = "%Y-%m-%d"\\\\\nMONTH_MASK = "%Y/%m"\\\\n@dataclass(init=False)\\\\\ndef __init__(self):\\\\n    self.data = {}\\\\n@dataclass\\\\\ndef __init__(self):\\\\n    self.data = field(default_factory=dict, metadata={"exclude": True})\\\\n@dataclass\\\\\ndef __init__(self, data):\\\\n    self.data = data\\\\n@dataclass\\\\\nclass DictRecord(CheckedRecord, DictStorage):\\\\n    """\\\\\n    # Read (d1~d3)\\\\\n    persistent    ->     memory      ->     view\\\\\n    d0: [x]              d0: [x]\\\\\n                                            d1: [ ]\\\\\n    d2: [x]              d2: [x]            d2: [x]\\\\\n                                            d3: [ ]\\\\\n\\\\\n    # Update:\\\\\n    view(update)  ->     memory      ->     persistent\\\\\n    d1: [ ]\\\\\n    d2: [ ]              d2: [ ]            d2: [x]\\\\\n    d3: [x]              d3: [x]            d3: [ ]\\\\\n    """\\\\\n    def __init__(self, data):\\\\n        self.data = data\\\\n    @property\\\\n    def day(self) -> datetime.date:\\\\n        date = datetime.datetime.strptime(self.data["day"], DAY_MASK)\\\\n        return date.date()\\\\n    @property\\\\n    def done(self) -> bool:\\\\n        return self.data["done"]\\\\n    @done.setter\\\\n    def done(self, value: bool) -> None:\\\\n        self.data["done"] = value\\\\n@dataclass\\\\\nclass DictHabit(Habit[DictRecord], DictStorage):\\\\n    def __init__(self, data):\\\\n        self.data = data\\\\n    @property\\\\n    def id(self) -> str:\\\\n        if "id" not in self.data:\\\\n            self.data["id"] = generate_short_hash(self.name)\\\\n        return self.data["id"]\\\\n    @property\\\\n    def name(self) -> str:\\\\n        return self.data["name"]\\\\n    @name.setter\\\\n    def name(self, value: str) -> None:\\\\n        self.data["name"] = value\\\\n    @property\\\\n    def star(self) -> bool:\\\\n        return self.data.get("star", False)\\\\n    @star.setter\\\\n    def star(self, value: int) -> None:\\\\n        self.data["star"] = value\\\\n    @property\\\\n    def records(self) -> list[DictRecord]:\\\\n        return [DictRecord(d) for d in self.data["records"]]\\\\n    async def tick(self, day: datetime.date, done: bool) -> None:\\\\n        if record := next((r for r in self.records if r.day == day), None):\\\\n            record.done = done\\\\n        else:\\\\n            data = {"day": day.strftime(DAY_MASK), "done": done}\\\\n            self.data["records"].append(data)\\\\n@dataclass\\\\\nclass DictHabitList(HabitList[DictHabit], DictStorage):\\\\n    def __init__(self, data):\\\\n        self.data = data\\\\n    @property\\\\n    def habits(self) -> list[DictHabit]:\\\\n        habits = [DictHabit(d) for d in self.data["habits"]]\\\\n        habits.sort(key=lambda x: x.star, reverse=True)\\\\n        return habits\\\\n    async def get_habit_by(self, habit_id: str) -> Optional[DictHabit]:\\\\n        for habit in self.habits:\\\\n            if habit.id == habit_id:\\\\n                return habit\\\\n    async def add(self, name: str) -> None:\\\\n        d = {"name": name, "records": [], "id": generate_short_hash(name)}\\\\n        self.data["habits"].append(d)\\\\n    async def remove(self, item: DictHabit) -> None:\\\\n        self.data["habits"].remove(item.data)\\\\n