from typing import Optional\\\nimport asyncio\\\nfrom nicegui import background_tasks, core\\\nfrom beaverhabits.app import crud\\\nfrom beaverhabits.app.db import User\\\nfrom beaverhabits.storage.dict import DictHabitList\\\nfrom beaverhabits.storage.storage import UserStorage\\\nfrom nicegui.storage import observables\\\n\\\nclass DatabasePersistentDict(observables.ObservableDict):\\\n    def __init__(self, user: User, data: dict) -> None:\\\n        self.user = user\\\n        super().__init__(data, on_change=self.backup)\\\n\\\n    def backup(self) -> None:\\\n        async def backup():\\\n            await crud.update_user_habit_list(self.user, self)\\\n\\\n        if core.loop:\\\n            background_tasks.create_lazy(backup(), name=self.user.email)\\\n        else:\\\n            core.app.on_startup(backup())\\\n\\\nclass UserDatabaseStorage(UserStorage[DictHabitList]):\\\n    async def get_user_habit_list(self, user: User) -> Optional[DictHabitList]:\\\n        user_habit_list = await crud.get_user_habit_list(user)\\\n        if user_habit_list is None:\\\n            return None\\\n\\\n        d = DatabasePersistentDict(user, user_habit_list.data)\\\n        return DictHabitList(d)\\\n\\\n    async def save_user_habit_list(self, user: User, habit_list: DictHabitList) -> None:\\\n        await crud.update_user_habit_list(user, habit_list.data)\\\n\\\n    async def merge_user_habit_list(self, user: User, other: DictHabitList) -> DictHabitList:\\\n        current = await self.get_user_habit_list(user)\\\n        if current is None:\\\n            return other\\\n\\\n        return await current.merge(other)