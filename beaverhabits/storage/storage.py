import datetime\nfrom typing import List, Optional, Protocol\nfrom beaverhabits.app.db import User\n\nclass CheckedRecord(Protocol):\n    @property\n    def day(self) -> datetime.date: ...\n    @property\n    def done(self) -> bool: ...\n    @done.setter\n    def done(self, value: bool) -> None: ...\n    def __str__(self):\n        return f"{self.day} [{'x' if self.done else ' '}]"\n    __repr__ = __str__\n\nclass Habit[R: CheckedRecord](Protocol):\n    @property\n    def id(self) -> str | int: ...\n    @property\n    def name(self) -> str: ...\n    @name.setter\n    def name(self, value: str) -> None: ...\n    @property\n    def star(self) -> bool: ...\n    @star.setter\n    def star(self, value: int) -> None: ...\n    @property\n    def records(self) -> List[R]: ...\n    @property\n    def ticked_days(self) -> list[datetime.date]:\n        return [r.day for r in self.records if r.done]\n    async def tick(self, day: datetime.date, done: bool) -> None: ...\n    def __str__(self):\n        return self.name\n    __repr__ = __str__\n\nclass HabitList[H: Habit](Protocol):\n    @property\n    def habits(self) -> List[H]: ...\n    async def add(self, name: str) -> None: ...\n    async def remove(self, item: H) -> None: ...\n    async def get_habit_by(self, habit_id: str) -> Optional[H]: ...\n\nclass SessionStorage[L: HabitList](Protocol):\n    def get_user_habit_list(self) -> Optional[L]: ...\n    def save_user_habit_list(self, habit_list: L) -> None: ...\n\nclass UserStorage[L: HabitList](Protocol):\n    async def get_user_habit_list(self, user: User) -> Optional[L]: ...\n    async def save_user_habit_list(self, user: User, habit_list: L) -> None: ...\n\n# Additional method for merging user habit lists\nasync def merge_user_habit_list(self, user: User, habit_list: L) -> None: ...\n