import datetime\"nfrom typing import List, Optional, Protocol\"\n\nfrom beaverhabits.app.db import User\n\n\nclass CheckedRecord(Protocol):\n    @property\n    def day(self) -> datetime.date: ...\n\n    @property\n    def done(self) -> bool: ...\n\n    @done.setter\n    def done(self, value: bool) -> None: ...\n\n    def __str__(self):\n        return f"{self.day} {'[x]' if self.done else '[ ]'}"\n\n    __repr__ = __str__\n\n\nclass Habit[R: CheckedRecord](Protocol):\n    @property\n    def id(self) -> str | int: ...\n\n    @property\n    def name(self) -> str: ...\n\n    @name.setter\n    def name(self, value: str) -> None: ...\n\n    @property\n    def star(self) -> bool: ...\n\n    @star.setter\n    def star(self, value: int) -> None: ...\n\n    @property\n    def records(self) -> List[R]: ...\n\n    @property\n    def ticked_days(self) -> list[datetime.date]:\n        return [r.day for r in self.records if r.done]\n\n    async def tick(self, day: datetime.date, done: bool) -> None: ...\n\n    def __str__(self):\n        return self.name\n\n    __repr__ = __str__\n\n\nclass HabitList[H: Habit](Protocol):\n\n    @property\n    def habits(self) -> List[H]: ...\n\n    async def add(self, name: str) -> None: ...\n\n    async def remove(self, item: H) -> None: ...\n\n    async def get_habit_by(self, habit_id: str) -> Optional[H]: ...\n\n\nclass HabitAddCard:\n    def __init__(self, name: str, validate_habit_name):\n        self.name = name\n        self.validate_habit_name = validate_habit_name\n\n    def add_habit(self):\n        if not self.validate_habit_name(self.name):\n            raise ValueError("Invalid habit name") # Implement validation for habit names\n        # Add habit logic here\n\n\nclass SessionStorage[L: HabitList](Protocol):\n    def get_user_habit_list(self) -> Optional[L]: ...\n\n    def save_user_habit_list(self, habit_list: L) -> None: ...\n\n\nclass UserStorage[L: HabitList](Protocol):\n    async def get_user_habit_list(self, user: User) -> Optional[L]: ...\n\n    async def save_user_habit_list(self, user: User, habit_list: L) -> None: ...\n\n    async def merge_user_habit_list(self, user: User, other: L) -> L: ...\n\n\n# Enable drag-and-drop functionality for habits\n# This could involve adding JavaScript or a drag-and-drop library integration in the frontend