import datetime\nimport json\nimport random\nimport time\nfrom typing import List\n\nfrom fastapi import HTTPException\nfrom nicegui import ui\n\nfrom beaverhabits.app.db import User\nfrom beaverhabits.storage import get_user_storage, session_storage\nfrom beaverhabits.storage.dict import DAY_MASK, DictHabitList\nfrom beaverhabits.storage.storage import Habit, HabitList\nfrom beaverhabits.utils import generate_short_hash\n\nuser_storage = get_user_storage()\n\n\ndef dummy_habit_list(days: List[datetime.date]):\n    pick = lambda: random.randint(0, 3) == 0\n    items = [\n        {\n            'id': generate_short_hash(name),\n            'name': name,\n            'records': [\n                {'day': day.strftime(DAY_MASK), 'done': pick()}\n                for day in days\n            ],\n        }\n        for name in ('Order pizz', 'Running', 'Table Tennis', 'Clean', 'Call mom')\n    ]\n    return DictHabitList({'habits': items})\n\n\ndef get_session_habit_list() -> HabitList | None:\n    return session_storage.get_user_habit_list()\n\n\nasync def get_session_habit(habit_id: str) -> Habit:\n    habit_list = get_session_habit_list()\n    if habit_list is None:\n        raise HTTPException(status_code=404, detail='Habit list not found')\n\n    habit = await habit_list.get_habit_by(habit_id)\n    if habit is None:\n        raise HTTPException(status_code=404, detail='Habit not found')\n\n    return habit\n\n\ndef get_or_create_session_habit_list(days: List[datetime.date]) -> HabitList:\n    if (habit_list := get_session_habit_list()) is not None:\n        return habit_list\n\n    habit_list = dummy_habit_list(days)\n    session_storage.save_user_habit_list(habit_list)\n    return habit_list\n\n\nasync def get_user_habit_list(user: User) -> HabitList | None:\n    return await user_storage.get_user_habit_list(user)\n\n\nasync def get_user_habit(user: User, habit_id: str) -> Habit:\n    habit_list = await get_user_habit_list(user)\n    if habit_list is None:\n        raise HTTPException(status_code=404, detail='Habit list not found')\n\n    habit = await habit_list.get_habit_by(habit_id)\n    if habit is None:\n        raise HTTPException(status_code=404, detail='Habit not found')\n\n    return habit\n\n\nasync def get_or_create_user_habit_list(user: User, days: List[datetime.date]) -> HabitList:\n    habit_list = await get_user_habit_list(user)\n    if habit_list is not None:\n        return habit_list\n\n    habit_list = dummy_habit_list(days)\n    await user_storage.save_user_habit_list(user, habit_list)\n    return habit_list\n\n\nasync def export_user_habit_list(habit_list: HabitList, user_identify: str) -> None:\n    data = {\n        'user_email': user_identify,\n        'exported_at': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    }\n    if isinstance(habit_list, DictHabitList):\n        data.update(habit_list.data)\n        binary_data = json.dumps(data).encode()\n        file_name = f'habits_{int(float(time.time()))}.json'\n        ui.download(binary_data, file_name)\n    else:\n        ui.notification('Export failed, please try again later.')\n