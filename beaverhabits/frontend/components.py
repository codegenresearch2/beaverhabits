import calendar\"nimport datetime\"nfrom dataclasses import dataclass\"nfrom typing import Callable, Optional\"n\"nfrom nicegui import events, ui\"nfrom nicegui.elements.button import Button\"n\"nfrom beaverhabits.configs import settings\"nfrom beaverhabits.frontend import icons\"nfrom beaverhabits.logging import logger\"nfrom beaverhabits.storage.dict import DAY_MASK, MONTH_MASK\"nfrom beaverhabits.storage.storage import Habit, HabitList\"nfrom beaverhabits.utils import WEEK_DAYS\"n\\nstrptime = datetime.datetime.strptime\\"n\\"nclass HabitAddCard(ui.card):\\\"n def __init__(self, habit: Habit, refresh: Callable):\\\"n super().__init__()\\"n self.habit = habit\\"n self.refresh = refresh\\"n self._init_ui()\\"n\\"n def _init_ui(self):\\\"n with self:\\\"n ui.label(self.habit.name).classes('text-base')  # Display habit name\\"n HabitStarCheckbox(self.habit, self.refresh).classes('ml-auto')\\"n HabitDeleteButton(self.habit, self.habit_list, self.refresh).classes('ml-auto')\\"n\\"nclass HabitStarCheckbox(ui.checkbox):\\\"n def __init__(self, habit: Habit, refresh: Callable):\\\"n super().__init__('', value=habit.star, on_change=self._async_task)\\"n self.habit = habit\\"n self.refresh = refresh\\"n self.bind_value(habit, 'star')\\"n self.props(f'checked-icon="{icons.STAR_FULL}" unchecked-icon="{icons.STAR}"')  # Set star icons\\"n self.props('flat fab-mini keep-color color=grey-8')\\"n\\"n async def _async_task(self, e: events.ValueChangeEventArguments):\\\"n self.habit.star = e.value\\"n self.refresh()\\"n logger.info(f'Habit Star changed to {e.value}')\\"n\\"nclass HabitDeleteButton(ui.button):\\\"n def __init__(self, habit: Habit, habit_list: HabitList, refresh: Callable):\\\"n super().__init__(on_click=self._async_task, icon=icons.DELETE)\\"n self.habit = habit\\"n self.habit_list = habit_list\\"n self.refresh = refresh\\"n\\"n async def _async_task(self):\\\"n await self.habit_list.remove(self.habit)\\"n self.refresh()\\"n logger.info(f'Deleted habit: {self.habit.name}')\\"n\\"nclass HabitNameInput(ui.input):\\\"n def __init__(self, habit: Habit):\\\"n super().__init__(value=habit.name, on_change=self._async_task)\\"n self.habit = habit\\"n self.validation = lambda value: 'Too long' if len(value) > 18 else None\\"n self.props('dense')\\"n\\"n async def _async_task(self, e: events.ValueChangeEventArguments):\\\"n self.habit.name = e.value\\"n logger.info(f'Habit Name changed to {e.value}')\\"n\\"nclass HabitCheckBox(ui.checkbox):\\\"n def __init__(self, habit: Habit, day: datetime.date):\\\"n super().__init__('', value=False, on_change=self._async_task)\\"n self.habit = habit\\"n self.day = day\\"n self._update_style(False)\\"n\\"n def _update_style(self, value: bool):\\\"n self.props(f'checked-icon="{icons.DONE}" unchecked-icon="{icons.CLOSE}" keep-color')\\"n if not value:\\"n self.props('color=grey-8')\\"n else:\\"n self.props('color=currentColor')\\"n\\"n async def _async_task(self, e: events.ValueChangeEventArguments):\\\"n self._update_style(e.value)\\"n await self.habit.tick(self.day, e.value)\\"n logger.info(f'Day {self.day} ticked: {e.value}')\\"n\\"nclass HabitAddButton(ui.input):\\\"n def __init__(self, habit_list: HabitList, refresh: Callable):\\\"n super().__init__('New item')\\"n self.habit_list = habit_list\\"n self.refresh = refresh\\"n self.on('keydown.enter', self._async_task)\\"n self.props('dense')\\"n\\"n async def _async_task(self):\\\"n logger.info(f'Adding new habit: {self.value}')\\"n await self.habit_list.add(self.value)\\"n self.refresh()\\"n self.set_value('')\\"n logger.info(f'Added new habit: {self.value}')\\"n\\"nclass HabitDateInput(ui.date):\\\"n def __init__(self, today: datetime.date, habit: Habit, ticked_data: dict[datetime.date, bool]):\\"n self.today = today\\"n self.habit = habit\\"n self.ticked_data = ticked_data\\"n super().__init__(self.ticked_days, on_change=self._async_task)\\"n self.props('multiple')\\"n self.props('minimal flat')\\"n self.props(f'default-year-month={self.today.strftime(MONTH_MASK)}')\\"n qdate_week_first_day = (settings.FIRST_DAY_OF_WEEK + 1) % 7\\"n self.props(f'first-day-of-week=\"{qdate_week_first_day}\"')\\"n self.props('today-btn')\\"n self.classes('shadow-none')\\"n self.bind_value_from(self, 'ticked_days')\\"n\\"n @property\\"n def ticked_days(self) -> list[str]:\\"n result = [k.strftime(DAY_MASK) for k, v in self.ticked_data.items() if v]\\"n result.append('today')  # Workaround to disable auto focus\\"n return result\\"n\\"n async def _async_task(self, e: events.ValueChangeEventArguments):\\\"n old_values = set(self.habit.ticked_days)\\"n new_values = set(strptime(x, DAY_MASK).date() for x in e.value if x != 'today')\\"n\\"n for day in new_values - old_values:\\"n self.props(f'default-year-month={day.strftime(MONTH_MASK)}')\\"n self.ticked_data[day] = True\\"n await self.habit.tick(day, True)\\"n logger.info(f'QDate day {day} ticked: True')\\"n\\"n for day in old_values - new_values:\\"n self.props(f'default-year-month={day.strftime(MONTH_MASK)}')\\"n self.ticked_data[day] = False\\"n await self.habit.tick(day, False)\\"n logger.info(f'QDate day {day} ticked: False')\\"n\\"n@dataclass\\"nclass CalendarHeatmap:\\\"n today: datetime.date\\"n headers: list[str]\\"n data: list[list[datetime.date]]\\"n week_days: list[str]\\"n\\"n @classmethod\\"n def build(cls, today: datetime.date, weeks: int, firstweekday: int = calendar.MONDAY):\\"n data = cls.generate_calendar_days(today, weeks, firstweekday)\\"n headers = cls.generate_calendar_headers(data[0])\\"n week_day_abbr = [calendar.day_abbr[(firstweekday + i) % 7] for i in range(7)]\\"n return cls(today, headers, data, week_day_abbr)\\"n\\"n @staticmethod\\"n def generate_calendar_headers(days: list[datetime.date]) -> list[str]:\\"n if not days:\\"n return []\\"n result = []\\"n month = year = None\\"n for day in days:\\"n cur_month, cur_year = day.month, day.year\\"n if cur_month != month:\\"n result.append(calendar.month_abbr[cur_month])\\"n month = cur_month\\"n continue\\"n if cur_year != year:\\"n result.append(str(cur_year))\\"n year = cur_year\\"n continue\\"n result.append('')\\"n return result\\"n\\"n @staticmethod\\"n def generate_calendar_days(today: datetime.date, total_weeks: int, firstweekday: int = calendar.MONDAY):\\"n lastweekday = (firstweekday - 1) % 7\\"n days_delta = (lastweekday - today.weekday()) % 7\\"n last_date_of_calendar = today + datetime.timedelta(days=days_delta)\\"n return [\\"n [last_date_of_calendar - datetime.timedelta(days=i, weeks=j) for j in reversed(range(total_weeks))] for i in reversed(range(WEEK_DAYS))]\\"n\\"nclass CalendarCheckBox(ui.checkbox):\\\"n def __init__(self, habit: Habit, day: datetime.date, today: datetime.date, ticked_data: dict[datetime.date, bool], is_bind_data: bool = True):\\"n self.habit = habit\\"n self.day = day\\"n self.today = today\\"n self.ticked_data = ticked_data\\"n super().__init__('', value=self.ticked, on_change=self._async_task)\\"n self.classes('inline-block')\\"n self.props('dense')\\"n unchecked_icon, checked_icon = self._icon_svg()\\"n self.props(f'unchecked-icon="{unchecked_icon}"')\\"n self.props(f'checked-icon="{checked_icon}"')\\"n if is_bind_data:\\"n self.bind_value_from(self, 'ticked')\\"n\\"n @property\\"n def ticked(self):\\"n return self.ticked_data.get(self.day, False)\\"n\\"n def _icon_svg(self):\\"n unchecked_color, checked_color = 'rgb(54,54,54)', 'rgb(103,150,207)'\\"n return (\\"n icons.SQUARE.format(color=unchecked_color, text=self.day.day),\\"n icons.SQUARE.format(color=checked_color, text=self.day.day),\\"n )\\"n\\"n async def _async_task(self, e: events.ValueChangeEventArguments):\\"n self.ticked_data[self.day] = e.value\\"n await self.habit.tick(self.day, e.value)\\"n logger.info(f'Calendar Day {self.day} ticked: {e.value}')\\"n\\"nclass HabitHeatmap(ui.card):\\\"n def __init__(self, habit: Habit, habit_calendar: CalendarHeatmap, ticked_data: dict[datetime.date, bool]):\\"n super().__init__()\\"n self.habit = habit\\"n self.habit_calendar = habit_calendar\\"n self.ticked_data = ticked_data\\"n self._init_ui()\\"n\\"n def _init_ui(self):\\"n with self:\\"n for header in self.habit_calendar.headers:\\"n ui.label(header).classes('text-gray-300 text-center')\\"n self.style('width: 20px; line-height: 18px; font-size: 9px;')\\"n for day in self.habit_calendar.data:\\"n for d in day:\\"n if d <= self.habit_calendar.today:\\"n CalendarCheckBox(self.habit, d, self.habit_calendar.today, self.ticked_data)\\"n else:\\"n ui.label().style('width: 20px; height: 20px;')\\"n for day_abbr in self.habit_calendar.week_days:\\"n ui.label(day_abbr).classes('indent-1.5 text-gray-300')\\"n self.style('width: 22px; line-height: 20px; font-size: 9px;')\\"n\\"n def habit_heat_map(habit: Habit, habit_calendar: CalendarHeatmap):\\"n ticked_data = {x: True for x in habit.ticked_days}\\"n for header in habit_calendar.headers:\\"n ui.label(header).classes('text-gray-300 text-center')\\"n self.style('width: 20px; line-height: 18px; font-size: 9px;')\\"n for day in habit_calendar.data:\\"n for d in day:\\"n if d <= habit_calendar.today:\\"n CalendarCheckBox(habit, d, habit_calendar.today, ticked_data)\\"n else:\\"n ui.label().style('width: 20px; height: 20px;')\\"n for day_abbr in habit_calendar.week_days:\\"n ui.label(day_abbr).classes('indent-1.5 text-gray-300')\\"n self.style('width: 22px; line-height: 20px; font-size: 9px;')\\"n"