import calendar\nimport datetime\nfrom dataclasses import dataclass\nfrom typing import Callable, Optional\nfrom nicegui import events, ui\nfrom beaverhabits.configs import settings\nfrom beaverhabits.frontend import icons\nfrom beaverhabits.logging import logger\nfrom beaverhabits.storage.dict import DAY_MASK, MONTH_MASK\nfrom beaverhabits.storage.storage import Habit, HabitList\nfrom beaverhabits.utils import WEEK_DAYS\n\nstrptime = datetime.datetime.strptime\n\n\ndef link(text: str, target: str):\n    return ui.link(text, target=target).classes(\"dark:text-white no-underline hover:no-underline\")\n\n\ndef menu_header(title: str, target: str):\n    link = ui.link(title, target=target)\n    link.classes(\"text-semibold text-2xl dark:text-white no-underline hover:no-underline\")\n    return link\n\n\ndef compat_menu(name: str, callback: Callable):\n    return ui.menu_item(name, callback).props('dense').classes('items-center')\n\n\nclass HabitCheckBox(ui.checkbox):\n    def __init__(self, habit: Habit, day: datetime.date, text: str = '', *, value: bool = False):\n        super().__init__(text, value=value, on_change=self._async_task)\n        self.habit = habit\n        self.day = day\n        self._update_style(value)\n\n    def _update_style(self, value: bool):\n        self.props(\"checked-icon='\u2713' unchecked-icon='x' keep-color\")\n        if not value:\n            self.props('color=grey-8')\n        else:\n            self.props('color=currentColor')\n\n    async def _async_task(self, e: events.ValueChangeEventArguments):\n        self._update_style(e.value)\n        await self.habit.tick(self.day, e.value)\n        logger.info(f'Day {self.day} ticked: {e.value}')\n